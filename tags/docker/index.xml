<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>docker on Thefron</title><link>https://thefron.me/tags/docker/</link><description>Recent content in docker on Thefron</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Sun, 22 Sep 2019 11:49:39 +0900</lastBuildDate><atom:link href="https://thefron.me/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>회사 테크 블로그 기고 - PhantomJS를 Headless Chrome(Puppeteer)로 전환하며</title><link>https://thefron.me/posts/buzzvil-tech-blog-puppeteer/</link><pubDate>Sun, 22 Sep 2019 11:49:39 +0900</pubDate><guid>https://thefron.me/posts/buzzvil-tech-blog-puppeteer/</guid><description>이 포스팅은 제가 버즈빌 테크 블로그에 기고한 글을 전제한 것입니다.
버즈빌에서는 모바일 잠금화면에 내보내기 위한 광고 및 컨텐츠 이미지를 생성하기 위한 PhantomJS 렌더링 서버를 다수 운영하고 있습니다. 일반적으로 PhantomJS는 웹페이지 캡쳐에 많이 쓰이지만, 기본적으로 headless하게 웹페이지를 렌더링하고 캡쳐할 수 있다는 특성 때문에 동적인 이미지 생성에도 많이 활용됩니다. 버즈빌의 렌더링 서버는 200개 이상의 컨텐츠 프로바이더로부터 실시간으로 잠금화면 컨텐츠 이미지를 생성하고 있어 분당 수백 건의 이미지를 안정적으로 생성하는 것이 가능해야 합니다.</description></item><item><title>Docker를 이용한 bundle install 및 Gemfile.lock 업데이트하기</title><link>https://thefron.me/bundle-install-using-docker/</link><pubDate>Wed, 28 Sep 2016 15:23:39 +0900</pubDate><guid>https://thefron.me/bundle-install-using-docker/</guid><description>여러개의 ruby 프로젝트를 작업하다보면 rbenv, rvm 등으로 버전별, 프로젝트별 ruby와 gem들을(rvm의 경우 gemset) 관리해야하는 귀찮음이 생긴다.
지난번에 로컬에 프로젝트 관련 gem을 깔지 않기로 결심했으니 rubygems의 디펜던시를 기록하는 Gemfile.lock 파일 역시 docker를 이용해 업데이트를 하기로 했다.
아래와 같은 Gemfile이 있다고 하자.
# Gemfile ruby &amp;#39;2.3.1&amp;#39; source &amp;#39;https://rubygems.org&amp;#39; gem &amp;#39;sinatra&amp;#39; 위 Gemfile에서 ruby 버전을 2.3.1로 명시하고 있기 때문에 rvm이든 rbenv든 이용해서 로컬에 해당 버전을 설치해 줘야 bundle install을 실행할 수 있다. 하지만 docker를 이용하면 원하는 ruby 버전으로 one-off container를 만들어 현재 경로를 mount한 채로 bundle install을 실행하면 Gemfile.</description></item><item><title>로컬 postgres 없이 heroku pg:psql 커맨드 사용하기</title><link>https://thefron.me/heroku-pg-psql-using-docker/</link><pubDate>Wed, 31 Aug 2016 16:45:45 +0900</pubDate><guid>https://thefron.me/heroku-pg-psql-using-docker/</guid><description>최근 로컬 개발환경을 리셋하면서 redis, postgres 등 각종 개발 디펜던시를 설치하지 않고, 오직 docker만 이용해서 로컬 환경을 최대한 깔끔하게 유지하기로 마음먹었다(똥고집이다).
그런데 난관이 등장했으니,
프로덕션 배포 중인 heroku 앱의 postgres 디비 콘솔에 접근하기 위해 heroku toolbelt에서 제공하는 heroku pg:psql 커맨드를 자주 사용하는데, 이 때 로컬 경로의 psql을 이용한다는 것이다.
$ heroku pg:psql ---&amp;gt; Connecting to DATABASE_URL sh: psql: command not found 굳이 toolbelt를 쓰지 않고 docker run -it --rm postgres psql 커맨드에 적당히 credential을 넣어주면 되지만, 매번 credential을 알아오기도 귀찮고 heroku toolbelt를 썩히기도 아까워 해결책이 있을지 고민해봤다.</description></item></channel></rss>